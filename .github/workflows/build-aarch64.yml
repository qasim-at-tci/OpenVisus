name: build-aarch64
on: [push]
jobs:
  cpython:
    runs-on: ${{ matrix.specs.os }}
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10']
        specs: [ 
            { os: 'ubuntu-latest', gui: '0', slam: '0', modvisus: '0', platform: 'aarch64', docker-image: 'nsdf/manylinux2014:latest', python-plaform-name: 'manylinux2014_aarch64' } 
          ] 
    steps:
    - name: git clone OpenVisus
      uses: actions/checkout@v2
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@master
      with:
        platforms: all
        
    - name: Run docker   
      uses: addnab/docker-run-action@v3
      with:
        image: ${{ matrix.specs.docker-image }}
        shell: bash
        options: -v ${{ github.workspace }}:/home/OpenVisus  -w /home/OpenVisus  --platform=${{ matrix.specs.platform }} 
        run: |
           set -e
           set -x
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           alias python3=`which python${{ matrix.python-version }} 
           
           mkdir -p build
           cd build
           cmake \
            -DPython_EXECUTABLE=`which python${{ matrix.python-version }} ` \
            -DVISUS_MODVISUS=${{ matrix.specs.modvisus }} \
            -DVISUS_GUI=${{ matrix.specs.gui }} \
            -DVISUS_SLAM=${{ matrix.specs.slam }} \
            ../
           make -j
           make install
           
           export PYTHONPATH=$PWD/Release
           python3 -m OpenVisus configure || python3 -m OpenVisus configure  # segmentation fault problem at the first try
           python3 -m OpenVisus test 
           python3 -m OpenVisus test-gui
           unset PYTHONPATH

           if [[ "${GIT_TAG}" != "" ]] ; then
             pushd Release/OpenVisus
             PYTHON_VERSION=${{ matrix.python-version }}
             python3 -m pip install setuptools wheel twine 
             python3 setup.py -q bdist_wheel --python-tag=cp${PYTHON_VERSION:0:1}${PYTHON_VERSION:2:1} --plat-name=${{ matrix.specs.python-plaform-name }}     
             WHEEL_FILENAME=`find dist -iname "*.whl"  | head -n 1`
             python3 -m twine upload --username ${{ secrets.PYPI_USERNAME }}  --password ${{ secrets.PYPI_PASSWORD }}  --skip-existing "${WHEEL_FILENAME}"
             popd
           fi
           
  conda:
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9', '3.10']
        specs: [
            { gui: '0', platform: 'aarch64', docker-image: 'condaforge/mambaforge:latest'}
          ] 
    steps:
    - name: git clone OpenVisus
      uses: actions/checkout@v2
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@master
      with:
        platforms: all
        
    - name: Run docker
      uses: addnab/docker-run-action@v3
      with:
        image: ${{ matrix.specs.docker-image }}
        shell: bash
        options: --platform=${{ matrix.specs.platform }} -v ${{ github.workspace }}:/home/OpenVisus -w /home/OpenVisus 
        run: |
           set -e
           set -x
           
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           
           conda_packages=(python=${{ matrix.python-version }} numpy anaconda-client conda conda-build wheel gcc_linux-64 gxx_linux-64 make cmake swig)
           if [[ "${{ matrix.specs.gui }}" == "1" ]]; then 
            conda_packages+=(pyqt=5.12) ; 
           fi
           mamba create --name my-python  -y -c conda-forge ${conda_packages[@]}
           conda init bash
           source ~/.bashrc
           conda activate my-python
           conda config --set always_yes yes --set changeps1 no --set anaconda_upload no

           mkdir -p build
           cd build
           cmake \
              -DCMAKE_PREFIX_PATH=${CONDA_PREFIX} \
              -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
              -DPython_EXECUTABLE=`which python` \
              -DVISUS_MODVISUS=${{ matrix.specs.modvisus }} \
              -DVISUS_GUI=${{ matrix.specs.gui }} \
              -DVISUS_SLAM=${{ matrix.specs.slam }} \
              -DQt5_DIR="${CONDA_PREFIX}/Library/lib/cmake/Qt5" \
               ../
           make -j
           make install
           
           conda develop ${PWD}/Release
           python -m OpenVisus configure || python -m OpenVisus configure  # segmentation fault problem at the first try
           python -m OpenVisus test  
           python -m OpenVisus test-gui
           conda develop ${PWD}/Release --uninstall
           
           if [[ "${GIT_TAG}" != ""  ]] ; then
             pushd Release/OpenVisus
             cp --no-clobber $CONDA_PREFIX/lib/python${{ matrix.python-version }}/distutils/command/bdist_conda* $CONDA_PREFIX/lib/python3.8/site-packages/setuptools/_distutils/command/ # fix for bdist_not found    
             python setup.py -q bdist_conda 1>/dev/null           
             CONDA_FILENAME=`find ${CONDA_PREFIX} -iname "openvisus*.tar.bz2"  | head -n 1`
             ${HOME}/anaconda3/bin/anaconda --verbose --show-traceback -t ${{ secrets.ANACONDA_TOKEN }} upload "${CONDA_FILENAME}"
             popd
           fi