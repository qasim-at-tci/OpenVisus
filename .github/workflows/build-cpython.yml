name: build-cpython
on: [push]
jobs:
  Build:
    runs-on: ${{ matrix.specs.os }}
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9'] 
        specs: [
            {os:'windows-latest',gui:'0', slam: '0', modvisus: '0', python-platform-name: 'win_amd64'},
            {os:'windows-latest',gui:'1', slam: '1', modvisus: '0', python-platform-name: 'win_amd64'},
            {os:'macos-latest'  ,gui:'0', slam: '0', modvisus: '0', python-platform-name: 'macosx_10_9_x86_64'},
            {os:'macos-latest'  ,gui:'1', slam: '1', modvisus: '0', python-platform-name: 'macosx_10_9_x86_64'},
            {os:'ubuntu-latest' ,gui:'0', slam: '0', modvisus: '1', python-platform-name: 'manylinux2010_x86_64', docker-image: 'visus/portable-linux-binaries'},
            {os:'ubuntu-latest' ,gui:'1', slam: '1', modvisus: '0', python-platform-name: 'manylinux2010_x86_64', docker-image: 'visus/portable-linux-binaries'},
          ]
     
    steps:
    
    # ////////////////////////////////////////////////////////////    
    
    - name: git clone OpenVisus
      uses: actions/checkout@v2
     
    - name: Install CPython 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }} 
        architecture: 'x64'

    # ////////////////////////////////////////////////////////////

    - name: Install CMake for windows
      uses: lukka/get-cmake@latest
      if: matrix.specs.os == 'windows-latest' 
      
    - name: Install Swig for windows
      if: matrix.specs.os == 'windows-latest'
      shell: bash -l {0}
      run: curl -L --insecure https://cfhcable.dl.sourceforge.net/project/swig/swigwin/swigwin-4.0.2/swigwin-4.0.2.zip -O  && unzip swigwin-4.0.2.zip # problems with choco
      
    - name: git clone opsray for windows
      if: matrix.specs.os == 'windows-latest' && matrix.specs.gui == '1'
      uses: nick-invision/retry@v1
      with:
        max_attempts: 3
        timeout_minutes: 4
        retry_wait_seconds: 5
        command: 'rm -Rf ExternalLibs/ospray_win && git clone https://github.com/sci-visus/ospray_win.git  ExternalLibs/ospray_win'

    - name: Install Qt for windows
      if: matrix.specs.os == 'windows-latest' && matrix.specs.gui == '1'
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.8'
        arch: 'win64_msvc2017_64'
        install-deps: 'true'
        dir: C:\
        setup-python: 'false' 

    - name: Compile OpenVisus on windows
      if: matrix.specs.os == 'windows-latest'
      shell: bash -l {0}
      run: |
           set -e
           set -x
           mkdir -p build 
           cd build
           cmake -G "Visual Studio 16 2019" -A "x64" \
             -DVISUS_GUI=${{ matrix.specs.gui }} \
             -DVISUS_SLAM=${{ matrix.specs.slam }} \
             -DQt5_DIR="${Qt5_Dir}/lib/cmake/Qt5" \
             -DPython_EXECUTABLE=${pythonLocation}/python.exe  \
             -DSWIG_EXECUTABLE=../swigwin-4.0.2/swig.exe \
             ../
           cmake --build . --target ALL_BUILD --config Release --parallel 4
           cmake --build . --target install   --config Release
           
           export PYTHONPATH=$PWD/Release
           python3  -m OpenVisus configure
           python3  -m OpenVisus test
           python3  -m OpenVisus test-gui
           unset PYTHONPATH
           
           python3 -m pip install setuptools wheel twine 1>/dev/null 
           cd Release/OpenVisus
           PYTHON_VERSION=${{ matrix.python-version }}
           python3 setup.py -q bdist_wheel --python-tag=cp${PYTHON_VERSION:0:1}${PYTHON_VERSION:2:1} --plat-name=${{ matrix.specs.python-platform-name }}
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           if [[ "${GIT_TAG}" != "" ]] ; then
             echo "GIT_TAG $GIT_TAG"
             python3 -m twine upload --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} --skip-existing  "dist/*.whl" 
           fi
           
           
    # ////////////////////////////////////////////////////////////

    - name: Install SDK 10.9 for macos 
      if: matrix.specs.os == 'macos-latest'
      uses: nick-invision/retry@v1
      with:
        max_attempts: 3
        timeout_minutes: 5
        retry_wait_seconds: 5
        command: 'cd /tmp && rm -Rf MacOSX-SDKs && git clone https://github.com/phracker/MacOSX-SDKs.git'

    - name: Install Qt for macos
      if: matrix.specs.os == 'macos-latest'  && matrix.specs.gui == '1'
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.8'
        target: 'desktop'
        install-deps: 'true'  
        dir: /tmp
        setup-python: 'false' 

    - name: Compile OpenVisus on macos
      if: matrix.specs.os == 'macos-latest'
      shell: bash -l {0}
      run: |
           brew install swig cmake
      
           mkdir -p build 
           cd build
           cmake -GXcode  \
             -DVISUS_GUI=${{ matrix.specs.gui }} \
             -DVISUS_SLAM=${{ matrix.specs.slam }} \
             -DQt5_DIR="${Qt5_Dir}/lib/cmake/Qt5" \
             -DCMAKE_OSX_SYSROOT="/tmp/MacOSX-SDKs/MacOSX10.9.sdk" \
             -DPython_EXECUTABLE=${pythonLocation}/python  \
             ../
           cmake --build ./ --target ALL_BUILD --config Release --parallel 4 
           cmake --build ./ --target install   --config Release 
           
           export PYTHONPATH=$PWD/Release
           python3  -m OpenVisus configure 
           python3  -m OpenVisus test
           python3  -m OpenVisus test-gui
           unset PYTHONPATH
           
           python3 -m pip install setuptools wheel twine 1>/dev/null 
           cd Release/OpenVisus
           PYTHON_VERSION=${{ matrix.python-version }}
           python3 setup.py -q bdist_wheel --python-tag=cp${PYTHON_VERSION:0:1}${PYTHON_VERSION:2:1} --plat-name=${{ matrix.specs.python-platform-name }}
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           if [[ "${GIT_TAG}" != "" ]] ; then
             echo "GIT_TAG $GIT_TAG"
             python3 -m twine upload --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} --skip-existing  "dist/*.whl" 
           fi           

    # ////////////////////////////////////////////////////////////

    - name: Compile OpenVisus on ubuntu
      if: matrix.specs.os == 'ubuntu-latest'
      uses: addnab/docker-run-action@v3
      with:
        image: ${{ matrix.specs.docker-image }}
        shell: bash
        options: -v ${PWD}:/home/OpenVisus -w /home/OpenVisus
        run: |
            set -e 
            set -x  
            alias python3=python${{ matrix.python-version }}
            GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
            PYTHON_VERSION=${{ matrix.python-version }}
            
            mkdir -p build 
            cd build
            cmake \
            	-DPython_EXECUTABLE=`which python${{ matrix.python-version }}` \
            	-DQt5_DIR=/opt/qt512  \
            	-DVISUS_GUI=${{ matrix.specs.gui }}  \
            	-DVISUS_MODVISUS=${{ matrix.specs.modvisus }}  \
            	-DVISUS_SLAM=${{ matrix.specs.slam }} \
            	../
            make -j
            make install
            
            export PYTHONPATH=$PWD/Release
            python3 -m OpenVisus configure || true  # segmentation fault problem
            python3  -m OpenVisus test
            python3  -m OpenVisus test-gui
            unset PYTHONPATH
            
            if [[ "${GIT_TAG}" != "" ]] ; then
              pushd Release/OpenVisus
              python3 -m pip install setuptools wheel twine 1>/dev/null 
              python3 setup.py -q bdist_wheel --python-tag=cp${PYTHON_VERSION:0:1}${PYTHON_VERSION:2:1} --plat-name=${{ matrix.specs.python-platform-name }}            
              python3 -m twine upload --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} --skip-existing  "dist/*.whl" 
              popd
              
              if [[ ${{ matrix.specs.modvisus }}  == '1' && ${{ matrix.python-version=='3.7' }} ]] ; then
                sleep 30 # give time pypi to get the pushed file
                pushd ../Docker/mod_visus
                echo ${{ secrets.DOCKER_TOKEN }} | docker login -u=${{ secrets.DOCKER_USERNAME }} --password-stdin
                docker build --tag visus/mod_visus:$TAG --tag visus/mod_visus:latest --build-arg TAG=$TAG .
                docker push visus/mod_visus:$TAG
                docker push visus/mod_visus:latest
                popd
              fi
            fi


