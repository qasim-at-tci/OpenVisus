name: build-cpython

on: [push]

jobs:

  # ///////////////////////////////////////////////////////////////
  Build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9'] 
        os: ["windows-latest", "macos-latest", "ubuntu-latest"]
        VISUS_GUI: ['1', '0']
     
    steps:
    
    # ____________________________________________ CLONE OPENVISUS
    
    - name: git clone OpenVisus
      uses: actions/checkout@v2
     
    # ____________________________________________ INSTALL  OSPRAY for windows
     
    - name: git clone opsray for windows
      if: matrix.os == 'windows-latest' && matrix.VISUS_GUI == '1'
      uses: nick-invision/retry@v1
      with:
        max_attempts: 3
        timeout_minutes: 4
        retry_wait_seconds: 5
        command: 'rm -Rf ExternalLibs/ospray_win && git clone https://github.com/sci-visus/ospray_win.git  ExternalLibs/ospray_win'

    # ____________________________________________ INSTALL CMAKE
    - name: Install CMake for windows
      uses: lukka/get-cmake@latest
      if: matrix.os == 'windows-latest' 
      
    - name: Install CMake for macos
      uses: lukka/get-cmake@latest
      if: matrix.os == 'macos-latest'
      
    # ____________________________________________ INSTALL SWIG 

    - name: Install Swig for windows
      if: matrix.os == 'windows-latest'
      shell: bash -l {0}
      run: curl -L --insecure https://cfhcable.dl.sourceforge.net/project/swig/swigwin/swigwin-4.0.2/swigwin-4.0.2.zip -O  && unzip swigwin-4.0.2.zip # problems with choco

    - name: Install Swig for macos
      if: matrix.os == 'macos-latest'
      shell: bash -l {0}
      run: brew install swig
      
    # ____________________________________________ INSTALL SDK 10.9
    
    - name: Install SDK 10.9 for macos 
      if: matrix.os == 'macos-latest'
      uses: nick-invision/retry@v1
      with:
        max_attempts: 3
        timeout_minutes: 5
        retry_wait_seconds: 5
        command: 'cd /tmp && rm -Rf MacOSX-SDKs && git clone https://github.com/phracker/MacOSX-SDKs.git'

    # ____________________________________________ INSTALL CPYTHON 
    - name: Install CPython 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }} 
        architecture: 'x64'


    # ____________________________________________ INSTALL QT (use existing python see https://github.com/jurplel/install-qt-action)
    
    - name: Install Qt for windows
      if: matrix.os == 'windows-latest' && matrix.VISUS_GUI == '1'
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.8'
        arch: 'win64_msvc2017_64'
        install-deps: 'true'
        dir: C:\
        setup-python: 'false' 
        
    - name: Install Qt for macos
      if: matrix.os == 'macos-latest'  && matrix.VISUS_GUI == '1'
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.8'
        target: 'desktop'
        install-deps: 'true'  
        dir: /tmp
        setup-python: 'false' 

    - name: Install glu on ubuntu
      if: matrix.os == 'ubuntu-latest'  && matrix.VISUS_GUI == '1' 
      shell: bash -l {0}
      run: sudo apt-get update && sudo apt-get install libglu1-mesa-dev 1>/dev/null


    # ____________________________________________ COMPILE OPENVISUS
    
    - name: Compile OpenVisus on windows
      if: matrix.os == 'windows-latest'
      shell: bash -l {0}
      run: |
           mkdir -p build 
           cd build
           cmake -G "Visual Studio 16 2019" -A "x64" \
             -DVISUS_GUI=${{ matrix.VISUS_GUI }} \
             -DVISUS_SLAM=${{ matrix.VISUS_GUI }} \
             -DQt5_DIR="${Qt5_Dir}/lib/cmake/Qt5" \
             -DPython_EXECUTABLE=${pythonLocation}/python.exe  \
             -DSWIG_EXECUTABLE=../swigwin-4.0.2/swig.exe \
             ../
           cmake --build . --target ALL_BUILD --config Release --parallel 4
           cmake --build . --target install   --config Release

    - name: Compile OpenVisus on macos
      if: matrix.os == 'macos-latest'
      shell: bash -l {0}
      run: |
           mkdir -p build 
           cd build
           cmake -GXcode  \
             -DVISUS_GUI=${{ matrix.VISUS_GUI }} \
             -DVISUS_SLAM=${{ matrix.VISUS_GUI }} \
             -DQt5_DIR="${Qt5_Dir}/lib/cmake/Qt5" \
             -DCMAKE_OSX_SYSROOT="/tmp/MacOSX-SDKs/MacOSX10.9.sdk" \
             -DPython_EXECUTABLE=${pythonLocation}/python  \
             ../
           cmake --build ./ --target ALL_BUILD --config Release --parallel 4 
           cmake --build ./ --target install   --config Release 

    - name: Compile OpenVisus on ubuntu
      if: matrix.os == 'ubuntu-latest'
      shell: bash -l {0}
      run: |
           docker run \
             -e PYTHON_VERSION=${{ matrix.python-version }} \
             -e VISUS_GUI=${{ matrix.VISUS_GUI }} \
             -e VISUS_SLAM=${{ matrix.VISUS_GUI }} \
             -e Qt5_DIR=/opt/qt512 \
             -e VISUS_MODVISUS=1 \
             -v ${PWD}:${PWD}  \
             -w ${PWD} visus/portable-linux-binaries \
             /bin/bash -c "./scripts/build_linux.sh"
           sudo chown -R root:root  build
           sudo chmod -R a+rwx      build

    # ____________________________________________ TEST
    - name: Test OpenVisus 
      shell: bash -l {0}
      run: |
           set -x
           which python
           cd build/Release/OpenVisus
           export PYTHONPATH=../
           ${pythonLocation}/python  -m OpenVisus configure  || true  # segmentation fault problem on linux
           ${pythonLocation}/python  -m OpenVisus test
           if [[ "${{ matrix.VISUS_GUI }}" == "1" ]] ; then 
             ${pythonLocation}/python  -m OpenVisus test-gui 
           fi

    # ____________________________________________ DISTRIB PYPI
    - name: Distrib to PyPi
      shell: bash -l {0}
      run: |

           ${pythonLocation}/python -m pip install setuptools wheel twine --upgrade 1>/dev/null || true
           cd build/Release/OpenVisus
           
           # running setup to create the wheel
           Version=${{ matrix.python-version }}
           if [[  "${{ matrix.os }}" == "windows-latest" ]] ; then PLATFORM_NAME=win_amd64            ; fi
           if [[  "${{ matrix.os }}" == "macos-latest"   ]] ; then PLATFORM_NAME=macosx_10_9_x86_64   ; fi
           if [[  "${{ matrix.os }}" == "ubuntu-latest"  ]] ; then PLATFORM_NAME=manylinux2010_x86_64 ; fi
           ${pythonLocation}/python setup.py -q bdist_wheel --python-tag=cp${Version:0:1}${Version:2:1} --plat-name=${PLATFORM_NAME}
             
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)           
           if [[ "${GIT_TAG}" != "" ]] ; then
             echo "GIT_TAG $GIT_TAG"
             ${pythonLocation}/python -m twine upload --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} --skip-existing  "dist/*.whl" 
           fi
             
    # ____________________________________________ DISTRIB DOCKER (for python version see Docker file (it's 3.7 on http:2.4 / debian:buster-slim)
    - name: Distrib to Docker
      if: matrix.os == 'ubuntu-latest' && matrix.VISUS_GUI == '0' && matrix.python-version=='3.7' 
      shell: bash -l {0}
      run: |
           set -x
           TAG=`${pythonLocation}/python Libs/swig/setup.py print-tag`
           echo "TAG=${TAG}" 
           cd Docker/mod_visus
           echo ${{ secrets.DOCKER_TOKEN }} | docker login -u=${{ secrets.DOCKER_USERNAME }} --password-stdin
           sleep 30 # give time pypi to get the pushed file
           docker build --tag visus/mod_visus:$TAG --tag visus/mod_visus:latest --build-arg TAG=$TAG .
           
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           if [[ "${GIT_TAG}" != "" ]] ; then
             echo "GIT_TAG $GIT_TAG"
             echo "Uploading  visus/mod_visus:$TAG to Docker"
             docker push visus/mod_visus:$TAG
             docker push visus/mod_visus:latest
           fi
