name: cpython-ubuntu
on: [push]
jobs:
  Build:
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9']
        VISUS_GUI: ['1', '0']
    steps:
    
    # ____________________________________________ 
    - name: git clone OpenVisus
      uses: actions/checkout@v2

    # ____________________________________________ 
    - name: Install CPython 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }} 
        architecture: 'x64'

    # ____________________________________________
    - name: Install glu 
      if: matrix.VISUS_GUI == '1' 
      shell: bash -l {0}
      run: sudo apt-get update && sudo apt-get install libglu1-mesa-dev 1>/dev/null

    # ____________________________________________ 
    - name: Compile 
      shell: bash -l {0}
      run: |
           docker run \
             -e PYTHON_VERSION=${{ matrix.python-version }} \
             -e VISUS_GUI=${{ matrix.VISUS_GUI }} \
             -e VISUS_SLAM=${{ matrix.VISUS_GUI }} \
             -e Qt5_DIR=/opt/qt512 \
             -e VISUS_MODVISUS=1 \
             -v ${PWD}:${PWD}  \
             -w ${PWD} visus/portable-linux-binaries \
             /bin/bash -c "./scripts/build_linux.sh"
           sudo chown -R root:root  build
           sudo chmod -R a+rwx      build

    # ____________________________________________ 
    - name: Test  
      shell: bash -l {0}
      run: |
           set -x
           which python
           cd build/Release/OpenVisus
           export PYTHONPATH=../
           ${pythonLocation}/python  -m OpenVisus configure  || true  # segmentation fault problem on linux
           ${pythonLocation}/python  -m OpenVisus test
           if [[ "${{ matrix.VISUS_GUI }}" == "1" ]] ; then 
             ${pythonLocation}/python  -m OpenVisus test-gui 
           fi

    # ____________________________________________ 
    - name: Distrib 
      shell: bash -l {0}
      run: |
           ${pythonLocation}/python -m pip install setuptools wheel twine --upgrade 1>/dev/null || true
           cd build/Release/OpenVisus
           # running setup to create the wheel
           PYTHON_VERSION=${{ matrix.python-version }}
           ${pythonLocation}/python setup.py -q bdist_wheel --python-tag=cp${PYTHON_VERSION:0:1}${PYTHON_VERSION:2:1} --plat-name=manylinux2010_x86_64
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)           
           if [[ "${GIT_TAG}" != "" ]] ; then
             echo "GIT_TAG $GIT_TAG"
             ${pythonLocation}/python -m twine upload --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} --skip-existing  "dist/*.whl" 
           fi
             
    # ____________________________________________ 
    # for python version see Docker file (it's 3.7 on http:2.4 / debian:buster-slim
    - name: mod_visus
      if: matrix.VISUS_GUI == '0' && matrix.python-version=='3.7' 
      shell: bash -l {0}
      run: |
           set -x
           TAG=`${pythonLocation}/python Libs/swig/setup.py print-tag`
           echo "TAG=${TAG}" 
           cd Docker/mod_visus
           echo ${{ secrets.DOCKER_TOKEN }} | docker login -u=${{ secrets.DOCKER_USERNAME }} --password-stdin
           sleep 30 # give time pypi to get the pushed file
           docker build --tag visus/mod_visus:$TAG --tag visus/mod_visus:latest --build-arg TAG=$TAG .
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           if [[ "${GIT_TAG}" != "" ]] ; then
             echo "GIT_TAG $GIT_TAG"
             echo "Uploading  visus/mod_visus:$TAG to Docker"
             docker push visus/mod_visus:$TAG
             docker push visus/mod_visus:latest
           fi
