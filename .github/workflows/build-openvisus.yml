name: build-openvisus
on: [push]
jobs:

  # ///////////////////////////////////////////////////////////////////
  build-openvisus-windows-cpython:
    runs-on: "windows-latest"
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9' ]  #  REMOVED '3.10' since PyQt5 it's not yet available for windows
    steps:
    
    # ____________________________________________ 
    - name: git clone OpenVisus
      uses: actions/checkout@v2

    # ____________________________________________ 
    - name: Install CMake 
      uses: lukka/get-cmake@latest

    # ____________________________________________ 
    - name: Install CPython 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }} 
        architecture: 'x64'

    # ____________________________________________ 
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.8'
        arch: 'win64_msvc2017_64'
        install-deps: 'true'
        dir: C:\
        setup-python: 'false' 
        
    # ____________________________________________ 
    - name: Compile (cpython)
      shell: bash -l {0}
      env: 
        PYTHON_VERSION: ${{ matrix.python-version }} 
        PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
        PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
            set -e
            set -x

            source scripts/utils.sh

            # install swig
            curl -L --insecure https://cfhcable.dl.sourceforge.net/project/swig/swigwin/swigwin-4.0.2/swigwin-4.0.2.zip -O 
            unzip swigwin-4.0.2.zip

            # install ospray
            git clone https://github.com/sci-visus/ospray_win.git ExternalLibs/ospray_win

            GIT_TAG=`git describe --tags --exact-match 2>/dev/null || true`
            PYTHON=${pythonLocation}/python
            Qt5_DIR=${Qt5_Dir}/lib/cmake/Qt5
            SWIG_EXECUTABLE=../swigwin-4.0.2/swig.exe
            PIP_PLATFORM=win_amd64

            BuildOpenVisusWindows
            CreateNonGuiVersion

            pushd Release/OpenVisus
            ConfigureAndTestCPython
            DistribToPip
            popd

            pushd Release.nogui/OpenVisus
            ConfigureAndTestCPython
            DistribToPip
            popd 

            Main


  # ///////////////////////////////////////////////////////////////////
  build-openvisus-windows-conda:
    runs-on: "windows-latest"
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9']  #  REMOVED '3.10' since PyQt5 it's not yet available for windows
    steps:
    
    # ____________________________________________ 
    - name: git clone OpenVisus
      uses: actions/checkout@v2

    # ____________________________________________ 
    - name: Install CMake 
      uses: lukka/get-cmake@latest

    # ____________________________________________
    - name: Install Miniconda 
      uses: conda-incubator/setup-miniconda@v2
      continue-on-error: true # if fails the cleaning process
      with:
        miniconda-version: 'latest'
        python-version: ${{ matrix.python-version }}
        activate-environment: my-env
        auto-update-conda: false
        channels: conda-forge,defaults

    # ____________________________________________ 
    - name: Compile (conda)
      shell: bash -l {0}
      env: 
        PYTHON_VERSION: ${{ matrix.python-version }} 
        ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }} 
      run: |
              set -e
              set -x

              source scripts/utils.sh

              # install swig
              curl -L --insecure https://cfhcable.dl.sourceforge.net/project/swig/swigwin/swigwin-4.0.2/swigwin-4.0.2.zip -O 
              unzip swigwin-4.0.2.zip

              # install ospray
              git clone https://github.com/sci-visus/ospray_win.git ExternalLibs/ospray_win

              # configure conda
              conda config --set always_yes yes --set changeps1 no --set anaconda_upload no             1>/dev/null
              conda install -c conda-forge -y conda cmake pyqt=5.12  anaconda-client  conda-build wheel 1>/dev/null

              GIT_TAG=`git describe --tags --exact-match 2>/dev/null || true`
              PYTHON=`which python`
              Qt5_DIR=${CONDA_PREFIX}/Library/lib/cmake/Qt5
              SWIG_EXECUTABLE=$../swigwin-4.0.2/swig.exe                

              BuildOpenVisusWindows
              CreateNonGuiVersion

              pushd Release/OpenVisus
              ConfigureAndTestConda
              DistribToConda
              popd

              pushd Release.nogui/OpenVisus
              ConfigureAndTestConda
              DistribToConda
              popd


  # ///////////////////////////////////////////////////////////////////
  build-openvisus-macos-cpython:
    runs-on: "macos-latest"
    strategy:
      fail-fast: false  
      matrix:
        # 3.6 disabled since "Error: Version 3.6 with arch x64 not found "
        python-version: [ '3.7', '3.8', '3.9', '3.10']  
    steps:
    
    # ____________________________________________ 
    - name: git clone OpenVisus
      uses: actions/checkout@v2
     
    # ____________________________________________ 
    - name: Install CPython 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }} 
        architecture: 'x64'

    # ____________________________________________ 
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.8'
        target: 'desktop'
        install-deps: 'true'
        dir: /tmp
        setup-python: 'false'

    # ____________________________________________ 
    - name: Compile cpython
      env:
        PYTHON_VERSION: ${{ matrix.python-version }} 
        PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
        PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}  
      shell: bash -l {0}
      run: |
            set -e
            set -x

            source scripts/utils.sh

            # install SDK
            pushd /tmp 
            rm -Rf MacOSX-SDKs 
            git clone https://github.com/phracker/MacOSX-SDKs.git
            popd

            # install preconditions
            brew install swig cmake              

            GIT_TAG=`git describe --tags --exact-match 2>/dev/null || true`
            PYTHON=${pythonLocation}/python
            Qt5_DIR=${Qt5_Dir}/lib/cmake/Qt5
            CMAKE_OSX_SYSROOT=/tmp/MacOSX-SDKs/MacOSX10.9.sdk
            PIP_PLATFORM=macosx_10_9_x86_64            

            BuildOpenVisusMacOs
            CreateNonGuiVersion

            pushd Release/OpenVisus
            ConfigureAndTestCPython
            DistribToPip
            popd

            pushd Release.nogui/OpenVisus
            ConfigureAndTestCPython
            DistribToPip
            popd 


  # ///////////////////////////////////////////////////////////////////
  build-openvisus-macos-conda:
    runs-on: "macos-latest"
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10']  
    steps:
    
    - name: git clone OpenVisus
      uses: actions/checkout@v2
     
    - name: Install Miniconda 
      uses: conda-incubator/setup-miniconda@v2
      continue-on-error: true # if fails the cleaning process
      with:
        miniconda-version: 'latest'
        python-version: ${{ matrix.python-version }}
        activate-environment: my-env
        auto-update-conda: false
        channels: conda-forge,defaults

    - name: Build (conda)
      env:
        PYTHON_VERSION: ${{ matrix.python-version }} 
        ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}  
      shell: bash -l {0}
      run: |
              set -e
              set -x 

              # configure conda
              conda config --set always_yes yes --set changeps1 no --set anaconda_upload no   1>/dev/null
              conda install --yes -c conda-forge conda anaconda-client conda-build wheel pyqt=5.12  1>/dev/null

              # install SDK
              pushd /tmp 
              rm -Rf MacOSX-SDKs 
              git clone https://github.com/phracker/MacOSX-SDKs.git
              popd

              # install preconditions
              brew install swig cmake    

              GIT_TAG=`git describe --tags --exact-match 2>/dev/null || true`
              PYTHON=`which python` 
              Qt5_DIR=${CONDA_PREFIX}/lib/cmake/Qt5
              CMAKE_OSX_SYSROOT=/tmp/MacOSX-SDKs/MacOSX10.9.sdk                

              BuildOpenVisusMacos
              CreateNonGuiVersion

              pushd Release/OpenVisus
              ConfigureAndTestConda  
              DistribToConda  
              popd   

              pushd Release.nogui/OpenVisus
              ConfigureAndTestConda
              DistribToConda
              popd      


  # ///////////////////////////////////////////////////////////////////
  build-openvisus-ubuntu:
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false  
      matrix:
        # '3.6' disabled SyntaxError: future feature annotations is not defined
        python-version: [ '3.7', '3.8', '3.9', '3.10' ]
    steps:
    - name: git clone OpenVisus
      uses: actions/checkout@v2

    - name: Compile cpython
      shell: bash -l {0}
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
        PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
        PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
      run: |
          # this will generate all AMD64 configurations (cpython gui/nogui; conda gui/nogui)
          docker run --rm -v ${PWD}:/home/OpenVisus -w /home/OpenVisus \
            -e BUILD_DIR=build_docker \
            -e PYTHON_VERSION=$PYTHON_VERSION \
            -e PYPI_USERNAME=$PYPI_USERNAME -e PYPI_PASSWORD=$PYPI_PASSWORD \
            -e ANACONDA_TOKEN=$ANACONDA_TOKEN \
            visus/portable-linux-binaries_x86_64:4.1 bash scripts/build_linux.sh

    - name: Deploy mod_visus
      shell: bash -l {0}
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_TOKEN: ${{ matrix.python-version }}
      run: |
          set -e
          set -x
          GIT_TAG=`git describe --tags --exact-match 2>/dev/null || true`
          if [[ "$GIT_TAG" != "" &&  "${PYTHON_VERSION}" == "3.9" ]] ; then
            sleep 30 # give time for pip package to be ready
            pushd  Docker/mod_visus
            docker build --tag visus/mod_visus:$GIT_TAG --tag visus/mod_visus:latest --build-arg TAG=$GIT_TAG .
            echo ${DOCKER_TOKEN} | docker login -u=${DOCKER_USERNAME} --password-stdin
            docker push visus/mod_visus:$GIT_TAG
            docker push visus/mod_visus:latest
            popd
          fi










