name: build-openvisus
on: [push]
jobs:

  # ///////////////////////////////////////////////////////////////////
  build-openvisus-windows-cpython:
    runs-on: "windows-latest"
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9' ]  #  REMOVED '3.10' since PyQt5 it's not yet available for windows
    steps:
    
    # ____________________________________________ 
    - name: git clone OpenVisus
      uses: actions/checkout@v2

    # ____________________________________________ 
    - name: Install CMake 
      uses: lukka/get-cmake@latest

    # ____________________________________________ 
    - name: Install CPython 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }} 
        architecture: 'x64'

    # ____________________________________________ 
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.8'
        arch: 'win64_msvc2017_64'
        install-deps: 'true'
        dir: C:\
        setup-python: 'false' 
        
    # ____________________________________________ 
    - name: Compile (cpython)
      shell: bash -l {0}
      env: 
        PYTHON_VERSION: ${{ matrix.python-version }} 
        PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
        PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        PIP_PLATFORM: win_amd64
      run: |
            set -e
            set -x

            GIT_TAG=`git describe --tags --exact-match 2>/dev/null || true`
            CPYTHON=${pythonLocation}/python

            # ///////////////////////////////////////////////
            function BuildOpenVisus() {
              mkdir -p build 
              cd build              
              cmake -G "Visual Studio 16 2019" -A "x64" \
                -DQt5_DIR="${Qt5_Dir}/lib/cmake/Qt5" \
                -DPython_EXECUTABLE=${CPYTHON}.exe  \
                -DSWIG_EXECUTABLE=../swigwin-4.0.2/swig.exe \
                ../
              cmake --build . --target ALL_BUILD --config Release --parallel 4
              cmake --build . --target install   --config Release
            }

            # ///////////////////////////////////////////////
            function CreateNonGuiVersion() {
              mkdir -p Release.nogui
              cp -R  Release/OpenVisus Release.nogui/OpenVisus
              rm -Rf Release.nogui/OpenVisus/QT_VERSION $(find Release.nogui/OpenVisus -iname "*VisusGui*")
            }

            # ///////////////////////////////////////////////
            function ConfigureAndTestCPython() {
              export PYTHONPATH=../
              $CPYTHON  -m OpenVisus configure 
              $CPYTHON  -m OpenVisus test
              $CPYTHON  -m OpenVisus test-gui
              unset PYTHONPATH
            }

            # ///////////////////////////////////////////////
            function DistribToPip() {
              rm -Rf ./dist
              $CPYTHON -m pip install setuptools wheel twine --upgrade 1>/dev/null || true
              $CPYTHON setup.py -q bdist_wheel --python-tag=cp${PYTHON_VERSION:0:1}${PYTHON_VERSION:2:1} --plat-name=$PIP_PLATFORM
              if [[ "${GIT_TAG}" != "" ]] ; then
                $CPYTHON -m twine upload --username ${PYPI_USERNAME} --password ${PYPI_PASSWORD} --skip-existing  "dist/*.whl" 
              fi
            }

            # ///////////////////////////////////////////////
            function Main() {

              # install swig
              curl -L --insecure https://cfhcable.dl.sourceforge.net/project/swig/swigwin/swigwin-4.0.2/swigwin-4.0.2.zip -O 
              unzip swigwin-4.0.2.zip

              # install ospray
              git clone https://github.com/sci-visus/ospray_win.git ExternalLibs/ospray_win

              BuildOpenVisus
              CreateNonGuiVersion

              pushd Release/OpenVisus
              ConfigureAndTestCPython
              DistribToPip
              popd

              pushd Release.nogui/OpenVisus
              ConfigureAndTestCPython
              DistribToPip
              popd 
            }

            Main


  # ///////////////////////////////////////////////////////////////////
  build-openvisus-windows-conda:
    runs-on: "windows-latest"
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9']  #  REMOVED '3.10' since PyQt5 it's not yet available for windows
    steps:
    
    # ____________________________________________ 
    - name: git clone OpenVisus
      uses: actions/checkout@v2

    # ____________________________________________ 
    - name: Install CMake 
      uses: lukka/get-cmake@latest

    # ____________________________________________
    - name: Install Miniconda 
      uses: conda-incubator/setup-miniconda@v2
      continue-on-error: true # if fails the cleaning process
      with:
        miniconda-version: 'latest'
        python-version: ${{ matrix.python-version }}
        activate-environment: my-env
        auto-update-conda: false
        channels: conda-forge,defaults

    # ____________________________________________ 
    - name: Compile (conda)
      shell: bash -l {0}
      env: 
        PYTHON_VERSION: ${{ matrix.python-version }} 
        ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }} 
      run: |
              set -e
              set -x

              GIT_TAG=`git describe --tags --exact-match 2>/dev/null || true`
              DPYTHON=`which python`

              # ///////////////////////////////////////////////
              function BuildOpenVisus() {
                mkdir -p build 
                cd build        
                cmake -G "Visual Studio 16 2019" -A "x64" \
                  -DQt5_DIR="${CONDA_PREFIX}/Library/lib/cmake/Qt5" \
                  -DPython_EXECUTABLE=$DPYTHON  \
                  -DSWIG_EXECUTABLE=../swigwin-4.0.2/swig.exe \
                  ../
                cmake --build . --target ALL_BUILD --config Release --parallel 4
                cmake --build . --target install   --config Release
              }

              # ///////////////////////////////////////////////
              function CreateNonGuiVersion() {
                mkdir -p Release.nogui
                cp -R  Release/OpenVisus Release.nogui/OpenVisus
                rm -Rf Release.nogui/OpenVisus/QT_VERSION $(find Release.nogui/OpenVisus -iname "*VisusGui*")
              }

              # //////////////////////////////////////////////////////////////
              function ConfigureAndTestConda() {
                conda develop $PWD/..
                $DPYTHON -m OpenVisus configure 
                $DPYTHON -m OpenVisus test
                $DPYTHON -m OpenVisus test-gui  
                conda develop $PWD/.. uninstall
              }

              # //////////////////////////////////////////////////////////////
              function DistribToConda() {
                rm -Rf $(find ${CONDA_PREFIX} -iname "openvisus*.tar.bz2")  || true
                $DPYTHON -v setup.py -q bdist_conda 1>/dev/null
                CONDA_FILENAME=`find ${CONDA_PREFIX} -iname "openvisus*.tar.bz2"  | head -n 1` 
                if [[ "${GIT_TAG}" != ""  ]] ; then
                  anaconda --verbose --show-traceback  -t ${ANACONDA_TOKEN}   upload ${CONDA_FILENAME}
                fi
              }         

              # ////////////////////////////////////////////////////////////
              function Main() {

                # install swig
                curl -L --insecure https://cfhcable.dl.sourceforge.net/project/swig/swigwin/swigwin-4.0.2/swigwin-4.0.2.zip -O 
                unzip swigwin-4.0.2.zip

                # install ospray
                git clone https://github.com/sci-visus/ospray_win.git ExternalLibs/ospray_win

                # configure conda
                conda config --set always_yes yes --set changeps1 no --set anaconda_upload no             1>/dev/null
                conda install -c conda-forge -y conda cmake pyqt=5.12  anaconda-client  conda-build wheel 1>/dev/null

                BuildOpenVisus
                CreateNonGuiVersion

                pushd Release/OpenVisus
                ConfigureAndTestConda
                DistribToConda
                popd

                pushd Release.nogui/OpenVisus
                ConfigureAndTestConda
                DistribToConda
                popd
              } 

              Main


  # ///////////////////////////////////////////////////////////////////
  build-openvisus-macos-cpython:
    runs-on: "macos-latest"
    strategy:
      fail-fast: false  
      matrix:
        # 3.6 disabled since "Error: Version 3.6 with arch x64 not found "
        python-version: [ '3.7', '3.8', '3.9', '3.10']  
    steps:
    
    # ____________________________________________ 
    - name: git clone OpenVisus
      uses: actions/checkout@v2
     
    # ____________________________________________ 
    - name: Install CPython 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }} 
        architecture: 'x64'

    # ____________________________________________ 
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.8'
        target: 'desktop'
        install-deps: 'true'
        dir: /tmp
        setup-python: 'false'

    # ____________________________________________ 
    - name: Compile cpython
      env:
        PYTHON_VERSION: ${{ matrix.python-version }} 
        PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
        PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}  
        PIP_PLATFORM: macosx_10_9_x86_64
      shell: bash -l {0}
      run: |
            set -e
            set -x

            CPYTHON=${pythonLocation}/python

            # ///////////////////////////////////////////////
            function BuildOpenVisus() {
              mkdir -p build 
              cd build              
              cmake -GXcode  \
                -DQt5_DIR="${Qt5_Dir}/lib/cmake/Qt5" \
                -DCMAKE_OSX_SYSROOT="/tmp/MacOSX-SDKs/MacOSX10.9.sdk" \
                -DPython_EXECUTABLE=${CPYTHON} \
                ../
              cmake --build ./ --target ALL_BUILD --config Release --parallel 4 
              cmake --build ./ --target install   --config Release 
            } 

            # ///////////////////////////////////////////////
            function CreateNonGuiVersion() {
              mkdir -p Release.nogui
              cp -R  Release/OpenVisus Release.nogui/OpenVisus
              rm -Rf Release.nogui/OpenVisus/QT_VERSION $(find Release.nogui/OpenVisus -iname "*VisusGui*")
            }

            # ///////////////////////////////////////////////
            function ConfigureAndTestCPython() {
              export PYTHONPATH=$PWD/..
              ${CPYTHON} -m OpenVisus configure 
              ${CPYTHON} -m OpenVisus test
              ${CPYTHON} -m OpenVisus test-gui
              unset PYTHONPATH
            }  

            # ///////////////////////////////////////////////
            function DistribToPip() {
              rm -Rf ./dist
              ${CPYTHON} -m pip install setuptools wheel twine 1>/dev/null
              ${CPYTHON} setup.py -q bdist_wheel --python-tag=cp${PYTHON_VERSION:0:1}${PYTHON_VERSION:2:1} --plat-name=$PIP_PLATFORM
              if [[ "$GIT_TAG" != "" && "$PYPI_USERNAME" != "" && "$PYPI_PASSWORD" != ""  ]] ; then
                ${CPYTHON} -m twine upload --username ${PYPI_USERNAME} --password ${PYPI_PASSWORD} --skip-existing  "dist/*.whl" 
              fi
            }                      

            # ///////////////////////////////////////////////
            function Main() {

              # install SDK
              pushd /tmp 
              rm -Rf MacOSX-SDKs 
              git clone https://github.com/phracker/MacOSX-SDKs.git
              popd

              # install preconditions
              brew install swig cmake              

              BuildOpenVisus
              CreateNonGuiVersion

              pushd Release/OpenVisus
              ConfigureAndTestCPython
              DistribToPip
              popd

              pushd Release.nogui/OpenVisus
              ConfigureAndTestCPython
              DistribToPip
              popd 
            }

            Main


  # ///////////////////////////////////////////////////////////////////
  build-openvisus-macos-conda:
    runs-on: "macos-latest"
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10']  
    steps:
    
    - name: git clone OpenVisus
      uses: actions/checkout@v2
     
    - name: Install Miniconda 
      uses: conda-incubator/setup-miniconda@v2
      continue-on-error: true # if fails the cleaning process
      with:
        miniconda-version: 'latest'
        python-version: ${{ matrix.python-version }}
        activate-environment: my-env
        auto-update-conda: false
        channels: conda-forge,defaults

    - name: Build (conda)
      env:
        PYTHON_VERSION: ${{ matrix.python-version }} 
        ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}  
      shell: bash -l {0}
      run: |
              set -e
              set -x 

              GIT_TAG=`git describe --tags --exact-match 2>/dev/null || true`
              DPYTHON=`which python` 

              # ///////////////////////////////////////////////
              function BuildOpenVisus() {
                mkdir -p build 
                cd build              
                cmake -GXcode  \
                  -DQt5_DIR="${CONDA_PREFIX}/lib/cmake/Qt5" \
                  -DCMAKE_OSX_SYSROOT="/tmp/MacOSX-SDKs/MacOSX10.9.sdk" \
                  -DPython_EXECUTABLE=${DPYTHON} \
                  ../
                cmake --build ./ --target ALL_BUILD --config Release --parallel 4 
                cmake --build ./ --target install   --config Release 
              } 

              # ///////////////////////////////////////////////
              function CreateNonGuiVersion() {
                mkdir -p Release.nogui
                cp -R  Release/OpenVisus Release.nogui/OpenVisus
                rm -Rf Release.nogui/OpenVisus/QT_VERSION $(find Release.nogui/OpenVisus -iname "*VisusGui*")
              }


              # //////////////////////////////////////////////////////////////
              function ConfigureAndTestConda() {
                conda develop $PWD/..
                $DPYTHON -m OpenVisus configure 
                $DPYTHON -m OpenVisus test
                $DPYTHON -m OpenVisus test-gui  
                conda develop $PWD/.. uninstall
              }

              # //////////////////////////////////////////////////////////////
              function DistribToConda() {
                rm -Rf $(find ${CONDA_PREFIX} -iname "openvisus*.tar.bz2")  || true
                # fix problem of bdist_conda command not found
                cp -f ${CONDA_PREFIX}/lib/python${PYTHON_VERSION}/distutils/command/bdist_conda.py ${CONDA_PREFIX}/lib/python${PYTHON_VERSION}/site-packages/setuptools/_distutils/command/bdist_conda.py
                $DPYTHON setup.py -q bdist_conda 1>/dev/null
                if [[ "${GIT_TAG}" != ""  ]] ; then
                  anaconda --verbose --show-traceback  -t ${ANACONDA_TOKEN}   upload `find ${CONDA_PREFIX} -iname "openvisus*.tar.bz2"  | head -n 1`
                fi
              }   

              # //////////////////////////////////////////////////////////////
              function Main() {

                # configure conda
                conda config --set always_yes yes --set changeps1 no --set anaconda_upload no   1>/dev/null
                conda install --yes -c conda-forge conda anaconda-client conda-build wheel pyqt=5.12  1>/dev/null

                # install SDK
                pushd /tmp 
                rm -Rf MacOSX-SDKs 
                git clone https://github.com/phracker/MacOSX-SDKs.git
                popd

                # install preconditions
                brew install swig cmake    

                BuildOpenVisus
                CreateNonGuiVersion

                pushd Release/OpenVisus
                ConfigureAndTestConda  
                DistribToConda  
                popd   

                pushd Release.nogui/OpenVisus
                ConfigureAndTestConda
                DistribToConda
                popd
              }

              Main        


  # ///////////////////////////////////////////////////////////////////
  build-openvisus-ubuntu:
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false  
      matrix:
        # '3.6' disabled SyntaxError: future feature annotations is not defined
        python-version: [ '3.7', '3.8', '3.9', '3.10' ]
    steps:
    - name: git clone OpenVisus
      uses: actions/checkout@v2

    - name: Compile cpython
      shell: bash -l {0}
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
        PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
        PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
      run: |
          # this will generate all AMD64 configurations (cpython gui/nogui; conda gui/nogui)
          docker run --rm -v ${PWD}:/home/OpenVisus -w /home/OpenVisus \
            -e BUILD_DIR=build_docker \
            -e PYTHON_VERSION=$PYTHON_VERSION \
            -e PYPI_USERNAME=$PYPI_USERNAME -e PYPI_PASSWORD=$PYPI_PASSWORD \
            -e ANACONDA_TOKEN=$ANACONDA_TOKEN \
            visus/portable-linux-binaries_x86_64:4.1 bash scripts/build_linux.sh

    - name: Deploy mod_visus
      shell: bash -l {0}
      env:
        PYTHON_VERSION: ${{ matrix.python-version }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_TOKEN: ${{ matrix.python-version }}
      run: |
          GIT_TAG=`git describe --tags --exact-match 2>/dev/null || true`
          if [[ "$GIT_TAG" !="" &&  "${PYTHON_VERSION}" == "3.9" ]] ; then
            sleep 30 # give time for pip package to be ready
            pushd  Docker/mod_visus
            docker build --tag visus/mod_visus:$GIT_TAG --tag visus/mod_visus:latest --build-arg TAG=$GIT_TAG .
            echo ${DOCKER_TOKEN} | docker login -u=${DOCKER_USERNAME} --password-stdin
            docker push visus/mod_visus:$GIT_TAG
            docker push visus/mod_visus:latest
            popd
          fi










