name: build-openvisus
on: [push]
jobs:

  # ///////////////////////////////////////////////////////////////////
  cpython-windows:
    runs-on: "windows-latest"
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9'] 
    steps:
    
    # ____________________________________________ 
    - name: git clone OpenVisus
      uses: actions/checkout@v2
     
    # ____________________________________________ 
    - name: git clone opsray 
      uses: nick-invision/retry@v1
      with:
        max_attempts: 3
        timeout_minutes: 4
        retry_wait_seconds: 5
        command: 'rm -Rf ExternalLibs/ospray_win && git clone https://github.com/sci-visus/ospray_win.git  ExternalLibs/ospray_win'

    # ____________________________________________ 
    - name: Install CMake 
      uses: lukka/get-cmake@latest
      
    # ____________________________________________
    - name: Install Swig 
      shell: bash -l {0}
      run: curl -L --insecure https://cfhcable.dl.sourceforge.net/project/swig/swigwin/swigwin-4.0.2/swigwin-4.0.2.zip -O  && unzip swigwin-4.0.2.zip # problems with choco

    # ____________________________________________ 
    - name: Install CPython 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }} 
        architecture: 'x64'

    # ____________________________________________ 
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.8'
        arch: 'win64_msvc2017_64'
        install-deps: 'true'
        dir: C:\
        setup-python: 'false' 
        
    # ____________________________________________ 
    - name: Compile  
      shell: bash -l {0}
      run: |
           set -e
           set -x
           mkdir -p build 
           cd build
           cmake -G "Visual Studio 16 2019" -A "x64" -DVISUS_GUI=1 -DVISUS_SLAM=1 -DQt5_DIR="${Qt5_Dir}/lib/cmake/Qt5" -DPython_EXECUTABLE=${pythonLocation}/python.exe  -DSWIG_EXECUTABLE=../swigwin-4.0.2/swig.exe ../
           cmake --build . --target ALL_BUILD --config Release --parallel 4
           cmake --build . --target install   --config Release

    # ____________________________________________ 
    - name: Test  
      shell: bash -l {0}
      run: |
           set -e
           set -x
           which python
           cd build/Release/OpenVisus
           export PYTHONPATH=../
           ${pythonLocation}/python  -m OpenVisus configure  || true  # segmentation fault problem on linux
           ${pythonLocation}/python  -m OpenVisus test
           ${pythonLocation}/python  -m OpenVisus test-gui

    # ____________________________________________
    - name: Distrib 
      shell: bash -l {0}
      run: |
           set -e
           set -x
           
           ${pythonLocation}/python -m pip install setuptools wheel twine --upgrade 1>/dev/null || true
           PYTHON_VERSION=${{ matrix.python-version }}
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           
           cd  build/Release/OpenVisus
           
           funtion DistribToPip() {
             rm -Rf ./dist
             ${pythonLocation}/python setup.py -q bdist_wheel --python-tag=cp${PYTHON_VERSION:0:1}${PYTHON_VERSION:2:1} --plat-name=win_amd64
             if [[ "${GIT_TAG}" != "" ]] ; then
               ${pythonLocation}/python -m twine upload --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} --skip-existing  "dist/*.whl" 
             fi
           }
           
           DistribToPip
           rm -Rf QT_VERSION $(find . -iname "*VisusGui*")
           DistribToPip


  # ///////////////////////////////////////////////////////////////////
  cpython-macos:
    runs-on: "macos-latest"
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9'] 
    steps:
    
    # ____________________________________________ 
    - name: git clone OpenVisus
      uses: actions/checkout@v2
     
    # ____________________________________________ 
    - name: Install CMake
      uses: lukka/get-cmake@latest
      
    # ____________________________________________ 
    - name: Install Swig 
      shell: bash -l {0}
      run: brew install swig
      
    # ____________________________________________ 
    - name: Install SDK 10.9 
      uses: nick-invision/retry@v1
      with:
        max_attempts: 3
        timeout_minutes: 5
        retry_wait_seconds: 5
        command: 'cd /tmp && rm -Rf MacOSX-SDKs && git clone https://github.com/phracker/MacOSX-SDKs.git'

    # ____________________________________________ 
    - name: Install CPython 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }} 
        architecture: 'x64'

    # ____________________________________________ 
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.12.8'
        target: 'desktop'
        install-deps: 'true'
        dir: /tmp
        setup-python: 'false'

    # ____________________________________________ 
    - name: Compile 
      shell: bash -l {0}
      run: |
           set -e
           set -x
           mkdir -p build 
           cd build
           cmake -GXcode  -DVISUS_GUI=1 -DVISUS_SLAM=1  -DQt5_DIR="${Qt5_Dir}/lib/cmake/Qt5" -DCMAKE_OSX_SYSROOT="/tmp/MacOSX-SDKs/MacOSX10.9.sdk" -DPython_EXECUTABLE=${pythonLocation}/python ../
           cmake --build ./ --target ALL_BUILD --config Release --parallel 4 
           cmake --build ./ --target install   --config Release 
           
    # ____________________________________________ 
    - name: Test  
      shell: bash -l {0}
      run: |
           set -e
           set -x
           which python
           cd build/Release/OpenVisus
           export PYTHONPATH=../
           ${pythonLocation}/python  -m OpenVisus configure  || true  # segmentation fault problem on linux
           ${pythonLocation}/python  -m OpenVisus test
           ${pythonLocation}/python  -m OpenVisus test-gui 

    # ____________________________________________ 
    - name: Distrib 
      shell: bash -l {0}
      run: |
           set -e
           set -x
           
           ${pythonLocation}/python -m pip install setuptools wheel twine --upgrade 1>/dev/null || true
           PYTHON_VERSION=${{ matrix.python-version }} 
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           
           cd build/Release/OpenVisus
           
           function DistribToPip() {
            rm -Rf ./dist
             ${pythonLocation}/python setup.py -q bdist_wheel --python-tag=cp${PYTHON_VERSION:0:1}${PYTHON_VERSION:2:1} --plat-name=macosx_10_9_x86_64 
             if [[ "${GIT_TAG}" != "" ]] ; then
               ${pythonLocation}/python -m twine upload --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} --skip-existing  "dist/*.whl" 
             fi           
           }
           
           DistribToPip
           rm -Rf QT_VERSION $(find . -iname "*VisusGui*")
           DistribToPip

  # ///////////////////////////////////////////////////////////////////
  cpython-ubuntu:
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9']
    steps:
    
    # ____________________________________________ 
    - name: git clone OpenVisus
      uses: actions/checkout@v2

    # ____________________________________________ 
    - name: Install CPython 
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }} 
        architecture: 'x64'

    # ____________________________________________
    - name: Install glu  
      shell: bash -l {0}
      run: |
          set -e
          set -x      
          sudo apt-get update 1>/dev/null
          sudo apt-get install libglu1-mesa-dev 1>/dev/null

    # ____________________________________________ 
    - name: Compile 
      shell: bash -l {0}
      run: |
           set -e
           set -x
           docker run -e PYTHON_VERSION=${{ matrix.python-version }} -e VISUS_GUI=1 -e VISUS_SLAM=1 -e Qt5_DIR=/opt/qt512 -e VISUS_MODVISUS=1 -v ${PWD}:${PWD} -w ${PWD} visus/portable-linux-binaries /bin/bash -c "./scripts/build_linux.sh"
           sudo chown -R root:root  build
           sudo chmod -R a+rwx      build

    # ____________________________________________ 
    - name: Test  
      shell: bash -l {0}
      run: |
           set -e
           set -x
           which python
           cd build/Release/OpenVisus
           export PYTHONPATH=../
           ${pythonLocation}/python  -m OpenVisus configure  || true  # segmentation fault problem on linux
           ${pythonLocation}/python  -m OpenVisus test
           ${pythonLocation}/python  -m OpenVisus test-gui 

    # ____________________________________________ 
    - name: Distrib 
      shell: bash -l {0}
      run: |
           set -e
           set -x
      
           ${pythonLocation}/python -m pip install setuptools wheel twine --upgrade 1>/dev/null || true
           PYTHON_VERSION=${{ matrix.python-version }}
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)   
           
           cd build/Release/OpenVisus
           
           function DistribToPip() {
            rm -Rf ./dist
             ${pythonLocation}/python setup.py -q bdist_wheel --python-tag=cp${PYTHON_VERSION:0:1}${PYTHON_VERSION:2:1} --plat-name=manylinux2010_x86_64
             if [[ "${GIT_TAG}" != "" ]] ; then
               ${pythonLocation}/python -m twine upload --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} --skip-existing  "dist/*.whl" 
             fi
           }
           
           DistribToPip
           rm -Rf QT_VERSION $(find . -iname "*VisusGui*")
           DistribToPip
           
           
           
    # ____________________________________________ 
    # for python version see Docker file (it's 3.9 now)
    - name: mod_visus
      if: matrix.python-version=='3.9' 
      shell: bash -l {0}
      run: |
           set -e
           set -x
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           
           echo ${{ secrets.DOCKER_TOKEN }} | docker login -u=${{ secrets.DOCKER_USERNAME }} --password-stdin
           
           sleep 30 # give time pypi to get the pushed file
           
           cd Docker/mod_visus
           docker build --tag visus/mod_visus:$GIT_TAG --tag visus/mod_visus:latest --build-arg TAG=$GIT_TAG .
           if [[ "${GIT_TAG}" != "" ]] ; then
             docker push visus/mod_visus:$GIT_TAG
             docker push visus/mod_visus:latest
           fi


  # ///////////////////////////////////////////////////////////////////
  conda-windows:
    runs-on: "windows-latest"
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9'] 
    steps:
    
    # ____________________________________________ 
    - name: git clone OpenVisus
      uses: actions/checkout@v2    

    # ____________________________________________ 
    - name: Install opsray
      uses: nick-invision/retry@v1
      with:
        max_attempts: 3
        timeout_minutes: 4
        retry_wait_seconds: 5
        command: 'rm -Rf ExternalLibs/ospray_win && git clone https://github.com/sci-visus/ospray_win.git  ExternalLibs/ospray_win'    

    # ____________________________________________
    - name: Install Miniconda 
      uses: conda-incubator/setup-miniconda@v2
      continue-on-error: true # if fails the cleaning process
      with:
        miniconda-version: 'latest'
        python-version: ${{ matrix.python-version }}
        activate-environment: tmp
        auto-update-conda: false
        channels: conda-forge,defaults

    # ____________________________________________
    - name: Configure Miniconda 
      shell: bash -l {0}
      run: |
           set -e
           set -x
           conda config --set always_yes yes --set changeps1 no --set anaconda_upload no   1>/dev/null
           conda install conda                                                             1>/dev/null
           curl -L --insecure https://cfhcable.dl.sourceforge.net/project/swig/swigwin/swigwin-4.0.2/swigwin-4.0.2.zip -O && unzip swigwin-4.0.2.zip # problems with choco
           conda install -c conda-forge cmake
           conda install -y pyqt=5.9  # -c conda-forge -y pyqt=5.12 (they rename DLLS, like Qt5Core.dll->Qt5Core_conda.dll))

    # ____________________________________________ 
    - name: Compile 
      shell: bash -l {0}
      run: |
           set -e
           set -x
           mkdir -p build
           cd build
           cmake -G "Visual Studio 16 2019" -A "x64" -DQt5_DIR="${CONDA_PREFIX}/Library/lib/cmake/Qt5" -DPython_EXECUTABLE=$(which python) -DSWIG_EXECUTABLE=../swigwin-4.0.2/swig.exe -DVISUS_SLAM=1 ../
           cmake --build . --target ALL_BUILD --config Release --parallel 4
           cmake --build . --target install   --config Release

    # ____________________________________________ 
    - name: Test  
      shell: bash -l {0}
      run: |
           set -e 
           set -x 
           which python
           cd build/Release/OpenVisus
           export PYTHONPATH=../
           python -m OpenVisus configure  || true  # segmentation fault problem on linux
           python -m OpenVisus test
           python -m OpenVisus test-gui

    # ____________________________________________ 
    - name: Distrib 
      shell: bash -l {0}   
      run: |
           set -e  
           set -x 
           
           conda install --yes anaconda-client  1>/dev/null  || true
           conda install --yes conda-build      1>/dev/null  || true
           conda install --yes wheel            1>/dev/null  || true
           export PATH=$HOME/anaconda3/bin:$PATH
           
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           
           cd build/Release/OpenVisus
           
           function DistribToConda() {
             rm -Rf $(find ${CONDA_PREFIX} -iname "openvisus*.tar.bz2")  || true
             python setup.py -q bdist_conda 1>/dev/null
             if [[ "${GIT_TAG}" != ""  ]] ; then
               anaconda --verbose --show-traceback  -t ${{ secrets.ANACONDA_TOKEN }}   upload `find ${CONDA_PREFIX} -iname "openvisus*.tar.bz2"  | head -n 1`
             fi
           }
           
           DistribToConda
           rm -Rf QT_VERSION $(find . -iname "*VisusGui*")
           DistribToConda


  # ///////////////////////////////////////////////////////////////////
  conda-macos:
    runs-on: "macos-latest"
    strategy:
      fail-fast: false  
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9'] 
    steps:
    
    # ____________________________________________ 
    - name: git clone OpenVisus
      uses: actions/checkout@v2    

    # ____________________________________________ 
    - name: Install SDK 10.9 
      uses: nick-invision/retry@v1
      with:
        max_attempts: 3
        timeout_minutes: 5
        retry_wait_seconds: 5
        command: 'cd /tmp && rm -Rf MacOSX-SDKs && git clone https://github.com/phracker/MacOSX-SDKs.git'      

    # ____________________________________________ 
    - name: Install Miniconda 
      uses: conda-incubator/setup-miniconda@v2
      continue-on-error: true # if fails the cleaning process
      with:
        miniconda-version: 'latest'
        python-version: ${{ matrix.python-version }}
        activate-environment: tmp
        auto-update-conda: false
        channels: conda-forge,defaults

    # ____________________________________________ 
    - name: Configure Miniconda 
      shell: bash -l {0}
      run: |
           set -e
           set -x
           conda config --set always_yes yes --set changeps1 no --set anaconda_upload no   1>/dev/null
           conda install conda                                                             1>/dev/null
           
           brew install swig
           brew install cmake # problems with conda
           conda install -c conda-forge -y pyqt=5.12

    # ____________________________________________ 
    - name: Compile 
      shell: bash -l {0}
      run: |
           set -e
           set -x      
           mkdir -p build
           cd build
           cmake -GXcode -DQt5_DIR="${CONDA_PREFIX}/lib/cmake/Qt5" -DCMAKE_OSX_SYSROOT="/tmp/MacOSX-SDKs/MacOSX10.9.sdk"  -DPython_EXECUTABLE=$(which python) -DVISUS_SLAM=1  ../
           cmake --build ./ --target ALL_BUILD --config Release --parallel 4 
           cmake --build ./ --target install   --config Release 

    # ____________________________________________ 
    - name: Test  
      shell: bash -l {0}
      run: |
           set -e
           set -x
           which python
           cd build/Release/OpenVisus
           export PYTHONPATH=../
           python -m OpenVisus configure  || true  # segmentation fault problem on linux
           python -m OpenVisus test
           python -m OpenVisus test-gui

    # ____________________________________________ 
    - name: Distrib 
      shell: bash -l {0}   
      run: |
           set -e
           set -x
           
           conda install --yes anaconda-client  1>/dev/null  || true
           conda install --yes conda-build      1>/dev/null  || true
           conda install --yes wheel            1>/dev/null  || true
           export PATH=$HOME/anaconda3/bin:$PATH
           
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           
           cd build/Release/OpenVisus
           
           function DistribToConda() {
             rm -Rf $(find ${CONDA_PREFIX} -iname "openvisus*.tar.bz2")  || true
             python setup.py -q bdist_conda 1>/dev/null
             if [[ "${GIT_TAG}" != ""  ]] ; then
               anaconda --verbose --show-traceback  -t ${{ secrets.ANACONDA_TOKEN }}   upload `find ${CONDA_PREFIX} -iname "openvisus*.tar.bz2"  | head -n 1`
             fi
           }
           
           DistribToConda
           rm -Rf QT_VERSION $(find . -iname "*VisusGui*")
           DistribToConda

  # ///////////////////////////////////////////////////////////////////
  conda-ubuntu:
    runs-on: "ubuntu-latest"
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.6', '3.7', '3.8', '3.9'] 
    steps:
    
    # ____________________________________________ 
    - name: git clone OpenVisus
      uses: actions/checkout@v2    

    # ____________________________________________ 
    - name: Install Miniconda 
      uses: conda-incubator/setup-miniconda@v2
      continue-on-error: true # if fails the cleaning process
      with:
        miniconda-version: 'latest'
        python-version: ${{ matrix.python-version }}
        activate-environment: tmp
        auto-update-conda: false
        channels: conda-forge,defaults

    # ____________________________________________ 
    - name: Configure Miniconda 
      shell: bash -l {0}
      run: |
           conda config --set always_yes yes --set changeps1 no --set anaconda_upload no   1>/dev/null
           conda install conda                                                             1>/dev/null

    # ____________________________________________
    - name: Install CMake 
      shell: bash -l {0}    
      run: |
           conda install -c conda-forge cmake

    # ____________________________________________
    - name: Compile  
      shell: bash -l {0}
      run: |
           set -e
           set -x
           # i can use the pyqt one, but I would need to share the directory to docker, for simplicity I'm not doing it
           docker run -e PYTHON_VERSION=${{ matrix.python-version }} -e Qt5_DIR=/opt/qt512 -v ${PWD}:${PWD}  -w ${PWD} visus/portable-linux-binaries /bin/bash -c "./scripts/build_linux.sh"
           sudo chown -R root:root  build
           sudo chmod -R a+rwx      build

    # ____________________________________________ 
    - name: Test
      shell: bash -l {0}
      run: |
           set -e
           set -x
           which python
           cd build/Release/OpenVisus
           export PYTHONPATH=../
           python -m OpenVisus configure  || true  # segmentation fault problem on linux
           python -m OpenVisus test
           python -m OpenVisus test-gui

    # ____________________________________________ 
    - name: Distrib 
      shell: bash -l {0}
      run: |
           set -e
           set -x
           
           conda install --yes anaconda-client  1>/dev/null  || true
           conda install --yes conda-build      1>/dev/null  || true
           conda install --yes wheel            1>/dev/null  || true
           
           export PATH=$HOME/anaconda3/bin:$PATH
           
           GIT_TAG=$(git describe --tags --exact-match 2>/dev/null || true)
           
           cd build/Release/OpenVisus
           
           function DistribToConda() {
           rm -Rf $(find ${CONDA_PREFIX} -iname "openvisus*.tar.bz2")  || true
             python setup.py -q bdist_conda 1>/dev/null
             if [[ "${GIT_TAG}" != ""  ]] ; then
               anaconda --verbose --show-traceback  -t ${{ secrets.ANACONDA_TOKEN }}   upload `find ${CONDA_PREFIX} -iname "openvisus*.tar.bz2"  | head -n 1`
             fi
           }
           
           DistribToConda
           rm -Rf QT_VERSION $(find . -iname "*VisusGui*")
           DistribToConda
